{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n    \"\"\"\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    return sorted(heapq.nlargest(n, nums), reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x: int, y: int) -> bool:\n    \"\"\"\n    Checks whether the two numbers differ at one bit position only.\n    \"\"\"\n    return bin(x ^ y).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s: str) -> int:\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    if first_index != -1:\n        last_index = s.rfind(char)\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n    \"\"\"\n    return (base * height * length) // 2"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    \"\"\"\n    Checks if the input string contains sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    return all(c.islower() or c == '_' for c in s)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n    \"\"\"\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    for char in s2:\n        s1 = s1.replace(char, '')\n    return s1"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(nums):\n    \"\"\"\n    Checks if a given list of integers contains any duplicate elements.\n    \"\"\"\n    return len(nums) != len(set(nums))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Checks if a given number is a Woodall number.\n    A Woodall number is a number that is the double of the sum of the factorials of its digits.\n    For example, 383 is a Woodall number because 383 = 2 * (120 + 120 + 24)\n    \"\"\"\n    def factorial(n):\n        \"\"\"\n        Helper function to calculate the factorial of a number.\n        \"\"\"\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    # Convert the number to a string to easily access its digits\n    str_n = str(n)\n\n    # Calculate the sum of the factorials of the digits\n    sum_factorial = sum(factorial(int(digit)) for digit in str_n)\n\n    # Check if the number is a Woodall number\n    return n == 2 * sum_factorial"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    \"\"\"\n    Checks if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    nums.sort(reverse=True)\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    \"\"\"\n    Checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\ndef test_sort_tuples():\n    assert sort_tuples([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\ntest_sort_tuples()"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n    \"\"\"\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    return sum(1 for num in lst if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        increasing = None\n        for i in range(len(arr) - 1):\n            if arr[i] == arr[i + 1]:\n                continue\n            elif arr[i] < arr[i + 1]:\n                if increasing is not None and not increasing:\n                    return False\n                increasing = True\n            else:\n                if increasing is not None and increasing:\n                    return False\n                increasing = False\n        return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    return sublist in main_list"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Checks if all tuples in a list have equal length.\n    \"\"\"\n    length = len(tuples[0])\n    for tup in tuples:\n        if len(tup) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 0\n    while i * i <= n:\n        j = 0\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    pattern_dict = {}\n    sequence_dict = {}\n    for i, pattern in enumerate(patterns):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = [i]\n        else:\n            pattern_dict[pattern].append(i)\n    for i, seq in enumerate(sequence):\n        if seq not in sequence_dict:\n            sequence_dict[seq] = [i]\n        else:\n            sequence_dict[seq].append(i)\n    return list(pattern_dict.values()) == list(sequence_dict.values())"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(i % k == 0 for i in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    \"\"\"\n    Checks if a number is divisible by 11.\n    \"\"\"\n    # Convert the number to a string to easily access each digit\n    n_str = str(n)\n\n    # Initialize the sum of the digits at odd and even indices\n    sum_odd = 0\n    sum_even = 0\n\n    # Iterate over the digits in the number\n    for i in range(len(n_str)):\n        # Add the digit to the appropriate sum\n        if i % 2 == 0:\n            sum_even += int(n_str[i])\n        else:\n            sum_odd += int(n_str[i])\n\n    # Check if the absolute difference between the sums is divisible by 11\n    return abs(sum_odd - sum_even) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[sequence[i-1]-1] + sequence[i-sequence[i-1]])\n    return ' '.join(map(str, sequence))\n\nassert newman_conway(10) == '1 1 2 2 3 4 4 5 6 6'"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculates the surface area of a sphere given its radius.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Finds the nth centered hexagonal number.\n    \"\"\"\n    return n * (5 * n - 3) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n    \"\"\"\n    str_n = str(n)\n    for i in range(len(str_n) - 1, -1, -1):\n        if i == 0 and str_n[i] == '1':\n            return int(str_n[1:]) if str_n[1:] else 0\n        if str_n[i] != '0':\n            return int(str_n[:i] + str(int(str_n[i]) - 1) + '9' * (len(str_n) - i - 1))\n    return n"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    return max(len(word) for word in words)\n\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substr):\n    \"\"\"\n    Checks if a given substring is present as a substring in a list of strings.\n    \"\"\"\n    for string in lst:\n        if substr in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    \"\"\"\n    Checks if a given number is undulating. An undulating number is a number in which the digits alternate between even and odd.\n    For example, 1212121 is undulating because it alternates between even and odd digits.\n    \"\"\"\n    s = str(n)\n    for i in range(len(s) - 1):\n        if int(s[i]) % 2 == int(s[i + 1]) % 2:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, where each tuple contains a string and an integer,\n    this function returns the string from the tuple with the smallest integer.\n    \"\"\"\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    return min(len(sub_lst) for sub_lst in lst)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "from collections import Counter\nfrom typing import List, Dict\ndef flatten(lst: List[List[int]]) -> List[int]:\n    return [item for sublist in lst for item in sublist]\ndef frequency_lists(lst: List[List[int]]) -> Dict[int, int]:\n    flattened_list = flatten(lst)\n    return dict(Counter(flattened_list))"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(num_list):\n    \"\"\"\n    This function takes a list of numbers and returns the product of all numbers in the list divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    return bin(n)[2:]"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    if n < 0:\n        return -1\n    while True:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Finds the kth element in the given array using 1-based indexing.\n    \"\"\"\n    arr.sort()\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0 or m == n:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of True booleans in the given list.\n    \"\"\"\n    return lst.count(True)\n\n# Test the function\nassert count_true_booleans([True, False, True]) == 2"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    result = list1 + list2 + list3\n    result.sort()\n    return result"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    # Calculate the number of odd numbers in the binary string\n    odd_count = binary_string.count('1')\n\n    # Calculate the length of the binary string\n    length = len(binary_string)\n\n    # Calculate the number of odd numbers after rotations\n    odd_count_rotated = (odd_count + rotations) % length\n\n    # Return the number of odd numbers after rotations\n    return odd_count_rotated"}
{"task_id": "Mbpp/111", "solution": "from typing import List\ndef common_in_nested_lists(nested_lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Finds the common elements in a list of nested lists.\n    \"\"\"\n    if not nested_lists:\n        return []\n\n    common_elements = set(nested_lists[0])\n\n    for lst in nested_lists[1:]:\n        common_elements = common_elements & set(lst)\n\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s: str) -> bool:\n    \"\"\"\n    Checks if a string represents an integer.\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] == nums[mid ^ 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def d(n):\n    \"\"\"\n    Helper function to calculate the sum of proper divisors of a number.\n    \"\"\"\n    sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n / i:\n                sum = sum + i\n            else:\n                sum = sum + i + n / i\n    return sum\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Function to calculate the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit + 1):\n        sum += i if i == d(d(i)) and i != d(i) else 0\n    return sum"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculates the angle of a complex number in radians.\n    \"\"\"\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = count_one - count_zero\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    def get_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        divisors.append(n)\n        return divisors\n\n    common_divisors = set(get_divisors(num1)).intersection(get_divisors(num2))\n    return sum(common_divisors)\n\n# Test cases\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiplies two integers.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Get the size of the matrix\n    size = len(matrix)\n\n    # Calculate the sum of the first row\n    magic_constant = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # Check columns\n    for col in range(size):\n        if sum(matrix[i][col] for i in range(size)) != magic_constant:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(size)) != magic_constant:\n        return False\n    if sum(matrix[i][size - i - 1] for i in range(size)) != magic_constant:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "from collections import Counter\ndef max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n    \"\"\"\n    counter = Counter(lst)\n    max_freq = max(counter.values())\n    for item, freq in counter.items():\n        if freq == max_freq:\n            return item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculates the circumference of a circle given its radius.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    for i in range(len(lst), 0, -1):\n        max_index = lst.index(max(lst[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                lst[:max_index+1] = lst[:max_index+1][::-1]\n            lst[:i] = lst[:i][::-1]\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Finds the maximum difference between any two elements in a given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    min_val = arr[0]\n    max_diff = 0\n\n    for num in arr:\n        max_diff = max(max_diff, num - min_val)\n        min_val = min(min_val, num)\n\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Removes all elements from `lst1` that are also present in `lst2`.\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == chr(97 + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] ^ nums[j] % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon given the length of its sides.\n    \"\"\"\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s: str) -> int:\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return len(set(type(i) for i in t)) <= 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    \"\"\"\n    Checks if the given element is the majority element in the sorted array.\n    \"\"\"\n    # Find the first occurrence of the element\n    i = binary_search(arr, 0, n-1, x)\n\n    # If element is not present, return False\n    if i == -1:\n        return False\n\n    # Check if the element is majority\n    if (i + n//2 < n) and (arr[i + n//2] == x):\n        return True\n\n    return False\ndef binary_search(arr, low, high, x):\n    \"\"\"\n    Performs binary search to find the first occurrence of the element.\n    \"\"\"\n    if high >= low:\n        mid = (high + low) // 2\n\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, mid + 1, high, x)\n        else:\n            return binary_search(arr, low, mid - 1, x)\n\n    return -1"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def largest_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n    \"\"\"\n    lst.sort(reverse=True)\n    return lst[:n]\n\n# Test the function\nassert set(largest_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    binary = bin(n)[2:]\n    binary = '0' + binary[1:] if len(binary) % 2 == 1 else binary\n    binary = ''.join(['1' if i % 2 == 0 else binary[i] for i in range(len(binary))])\n    return int(binary, 2)"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    from collections import Counter\n    count = Counter(lst)\n    return dict(count)"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n    for j in range(2, n + 1):\n        for i in range(1, m + 1):\n            for k in range(i, m + 1):\n                dp[k][j] += dp[k - 1][j - 1]\n    return sum(dp[i][n] for i in range(1, m + 1))"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(n):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n    \"\"\"\n    root = math.sqrt(n)\n    if root != int(root):\n        root = int(root) + 1\n    return root * root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = arr[0]\n    for i in range(1, n):\n        left[i] = max(left[i-1], arr[i] if arr[i] > arr[i-1] else 0)\n\n    right[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right[i] = max(right[i+1], arr[i] if arr[i] > arr[i+1] else 0)\n\n    max_sum = max(left)\n    for i in range(1, n-1):\n        max_sum = max(max_sum, left[i-1] + arr[i] + right[i+1])\n    max_sum = max(max_sum, right[1])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, elem):\n    return tup.count(elem)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(complex_num):\n    \"\"\"\n    Converts a complex number to polar coordinates.\n    \"\"\"\n    magnitude, angle = cmath.polar(complex_num)\n    return (magnitude, angle)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(1 for i in lst if isinstance(i, int))"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\ndef combinations_colors(colors, n):\n    return [x for x in product(*([colors]*n))]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while (p * p <= n):\n        if primes[p] == True:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return b, a"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple(tuple(max(a, b) for a, b in zip(x, y)) for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(t1, t2):\n    return tuple(a // b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number.\n    A star number is a number that can be expressed as the sum of the factorial of its digits.\n    For example, 145 is a star number because 145 = 1! + 4! + 5!.\n    \"\"\"\n    def factorial(num):\n        \"\"\"\n        Calculates the factorial of a number.\n        \"\"\"\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def is_star_num(num):\n        \"\"\"\n        Checks if a number is a star number.\n        \"\"\"\n        return num == sum(factorial(int(digit)) for digit in str(num))\n\n    star_num_count = 0\n    num = 1\n    while star_num_count < n:\n        if is_star_num(num):\n            star_num_count += 1\n        num += 1\n\n    return num - 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a character.\n    \"\"\"\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [x[-1] for x in lst]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(t1, t2):\n    return tuple(x1 - x2 for x1, x2 in zip(t1, t2))\n\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the first two binomial coefficients\n    binomial_coeff = [1, 1]\n    sum_even_index = 0\n\n    # Calculate the binomial coefficients up to n\n    for i in range(2, n + 1):\n        new_coeff = binomial_coeff[i - 1] * 2 * (2 * (i - 1) + 1) // (i + 1)\n        binomial_coeff.append(new_coeff)\n\n    # Sum the even index binomial coefficients\n    for i in range(0, len(binomial_coeff), 2):\n        sum_even_index += binomial_coeff[i]\n\n    return sum_even_index"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Checks if all elements in a list are unique.\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous subarray in a modified array.\n    The array is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the sum of the array repeated k times\n    total_sum_k = total_sum * k\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the array\n    for i in range(n * k):\n        # Add the current element to the current sum\n        current_sum += arr[i % n]\n\n        # Update the maximum sum if the current sum is larger\n        max_sum = max(max_sum, current_sum)\n\n        # If the current sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum\n    return max_sum if max_sum != float('-inf') else total_sum_k"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_sublist = [sublist for sublist in lst if len(sublist) == max_len]\n    return max_len, max_sublist[0]"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(base, height):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle given the lengths of the other two sides.\n    \"\"\"\n    return math.sqrt(base**2 + height**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, int) or isinstance(item, float):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculates the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Initialize an empty dictionary\n    aggregate_dict = {}\n\n    # Iterate over the list of tuples\n    for name, value in lst:\n        # If the name is already in the dictionary, add the value to the existing total\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        # If the name is not in the dictionary, add it with the value\n        else:\n            aggregate_dict[name] = value\n\n    # Find the name with the maximum aggregate\n    max_aggregate_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    # Return the name and its maximum aggregate\n    return (max_aggregate_name, aggregate_dict[max_aggregate_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    dp = [[0] * (2*n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(2 * i + 1):\n            if j < i:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[n][2*n]"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()\n    return None"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[i] = arr[i]\n    for j in range(i+1, n):\n        if arr[j] > arr[i]:\n            dp[j] = max(dp[j], dp[i] + arr[j])\n        else:\n            dp[j] = dp[j-1]\n    for j in range(i-1, -1, -1):\n        if arr[j] < arr[k]:\n            dp[k] = max(dp[k], dp[j] + arr[k])\n        else:\n            dp[k] = dp[k-1]\n    return max(dp)"}
{"task_id": "Mbpp/308", "solution": "from typing import List\ndef large_product(list1: List[int], list2: List[int], k: int) -> List[int]:\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    list1.sort()\n    list2.sort()\n    result = []\n\n    for i in range(k):\n        product = list1[-1] * list2[-1]\n        result.append(product)\n        list1.pop()\n        list2.pop()\n\n    return result"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in the binary representation of `n`.\n    \"\"\"\n    i = 0\n    while n & (1 << i):\n        i += 1\n    return n | (1 << i)"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculates the volume of a cone given its radius and height.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_n_minus_1 = 1\n    lucas_n_minus_2 = 2\n    for _ in range(2, n + 1):\n        lucas_n = lucas_n_minus_1 + lucas_n_minus_2\n        lucas_n_minus_2 = lucas_n_minus_1\n        lucas_n_minus_1 = lucas_n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        temp_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(temp_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    return [sum(int(digit) for digit in str(num)) for num in lst]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Finds the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    \"\"\"\n    This function checks if the parity of a given number is odd.\n    \"\"\"\n    return n % 2 != 0"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_val is None or item < min_val:\n                min_val = item\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n    \"\"\"\n    return [x[n] for x in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Checks if any value in `seq1` exists in `seq2`.\n    \"\"\"\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == max_len:\n            return sublist"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(nums):\n    rounded_nums = [round(num) for num in nums]\n    total_sum = sum(rounded_nums)\n    return total_sum * len(rounded_nums)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(str(i) for i in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Converts a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    date_parts = date.split('-')\n    return f'{date_parts[2]}-{date_parts[1]}-{date_parts[0]}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    \"\"\"\n    Extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Finds the directrix of a parabola given its standard form coefficients.\n    The standard form of a parabola is given by `y = ax^2 + bx + c`.\n    The directrix of a parabola is the line `y = c`.\n    \"\"\"\n    return -b**2/4/a"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculates the median length of a trapezium given the lengths of its four sides.\n    \"\"\"\n    # Sort the lengths\n    sides = sorted([a, b, c])\n\n    # The median length is the middle length\n    return sides[1]"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Checks if the given number is greater than all elements in the array.\n    \"\"\"\n    return all(i > num for i in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    \"\"\"\n    Finds the last digit of a given number.\n    \"\"\"\n    return n % 10\n\n# Test cases\nassert last_digit(123) == 3\nassert last_digit(100) == 0\nassert last_digit(1234567890) == 9\nassert last_digit(9876543210) == 0"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return s[::2]"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/440", "solution": "import nltk\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\ndef find_adverb_position(sentence):\n    words = nltk.word_tokenize(sentence)\n    tagged = nltk.pos_tag(words)\n    for i, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS', 'WRB'] and word not in stop_words:\n            return i, i+1, word\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(n):\n    \"\"\"\n    Calculates the surface area of a cube of a given size.\n    The surface area of a cube is given by 6*s^2, where s is the side length of the cube.\n    \"\"\"\n    return 6 * n ** 2"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple(tuple(a*b for a, b in zip(x, y)) for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num**3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        perrin = [0, 1, 2]\n        for i in range(3, n):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s: str) -> str:\n    \"\"\"\n    Removes all whitespaces from the given string.\n    \"\"\"\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Checks if the given month number contains 31 days.\n    \"\"\"\n    # Months with 31 days: January, March, May, July, August, October, December\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    if month_number in thirty_one_days_months:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check_month_number(5) == True\nassert check_month_number(6) == False\nassert check_month_number(12) == True\nassert check_month_number(13) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculates the area of a rectangle given its length and width.\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join([c for c in s if not c.isupper()])"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "solution": "from itertools import chain, combinations\ndef combinations_list(lst):\n    return list(chain(*[combinations(lst, i) for i in range(len(lst) + 1)]))"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples1, tuples2):\n    \"\"\"\n    Finds the intersection of elements in the given tuple lists irrespective of their order.\n    \"\"\"\n    # Convert tuples to sets for easy comparison\n    sets1 = [set(t) for t in tuples1]\n    sets2 = [set(t) for t in tuples2]\n\n    # Find the intersection of each set with the other sets\n    intersections = []\n    for s1 in sets1:\n        for s2 in sets2:\n            intersections.append(s1.intersection(s2))\n\n    # Convert the intersections back to tuples and return as a set\n    return set([tuple(i) for i in intersections])"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def to_lower(s: str) -> str:\n    \"\"\"\n    Converts the given string to lower case.\n    \"\"\"\n    return s.lower()\n\n# Test cases\nassert to_lower(\"InValid\") == \"invalid\"\nassert to_lower(\"VALID\") == \"valid\"\nassert to_lower(\"valid\") == \"valid\"\nassert to_lower(\"\") == \"\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    \"\"\"\n    Finds the first digit of a given number.\n    \"\"\"\n    while n >= 10:\n        n //= 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list with only the odd ones.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    for i in range(0, n):\n        if (arr[i] % 2 == 0):\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count * odd_count)"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n    For example, given num1 = 123 and num2 = 321, this function returns 2.\n    \"\"\"\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Ensure the two numbers have the same number of digits\n    if len(num1_str) != len(num2_str):\n        raise ValueError(\"Both numbers must have the same number of digits\")\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        sum_diff += abs(int(digit1) - int(digit2))\n\n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    return tuple(sorted(set(t1 + t2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, k):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split_string(s):\n    return list(s)\n\nassert split_string('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return lst == sorted(lst)\n\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a given list.\n    \"\"\"\n    unique_nums = list(set(nums))\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "from typing import List\ndef unique_product(nums: List[int]) -> int:\n    \"\"\"\n    Calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    return sub_list in main_list"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit *= i\n        while last_digit % 10 == 0:\n            last_digit //= 10\n        last_digit %= 10\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [val for pair in zip(list1, list2, list3) for val in pair]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    \"\"\"\n    Finds the dissimilar elements in two tuples.\n    \"\"\"\n    return tuple(set(t1) ^ set(t2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(tup):\n    \"\"\"\n    Recursively removes uneven elements in a nested tuple.\n    \"\"\"\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    # Calculate the surface area of a square pyramid\n    # The surface area is given by the formula:\n    # Surface Area = 1/2 * base_edge^2 + base_edge * height\n    surface_area = 0.5 * base_edge**2 + base_edge * height\n    return surface_area"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <= 1:\n        return 1\n\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items by price in descending order\n    items.sort(key=lambda x: x['price'], reverse=True)\n\n    # Return the first n items\n    return items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in a given list.\n    \"\"\"\n    if not nums:\n        return 0\n    min_num = max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num - min_num"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n    \"\"\"\n    return [i**2 for i in range(int(start**0.5), int(end**0.5)+1)]"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n    \"\"\"\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\ndef sum_Of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += comb(n, i) * comb(n, i+1)\n    return total"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n    \"\"\"\n    return '.'.join([str(int(i)) for i in ip.split('.')])"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(nums):\n    even_nums = [num for num in nums if num % 2 == 0]\n    odd_nums = [num for num in nums if num % 2 != 0]\n    return abs(even_nums[0] - odd_nums[0])"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(nums1, nums2, k):\n    \"\"\"\n    Finds the kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two sorted arrays\n    merged = sorted(nums1 + nums2)\n\n    # Return the kth element\n    return merged[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    \"\"\"\n    Checks if a number is an Armstrong number.\n    An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 153 = 1^3 + 5^3 + 3^3.\n    \"\"\"\n    num = n\n    result = 0\n    n = str(n)\n    for i in n:\n        result += int(i) ** len(n)\n    return result == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculates the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2\n\n    # Calculate the average of the first n natural numbers\n    average = total_sum / n\n\n    return (total_sum, average)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    \"\"\"\n    Checks if a given number is even.\n    \"\"\"\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s: str) -> str:\n    \"\"\"\n    Finds the first repeated character in a given string.\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    def is_lucid(num):\n        if num == 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(1, n + 1) if is_lucid(i)]\n\nassert get_lucid(10) == [2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Reverses the order of words in a string separated by spaces.\n    For example, given the string \"python program\", this function returns \"program python\".\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the list.\n    \"\"\"\n    del lst[k]\n    return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[sub[i] for sub in lst] for i in range(2)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total = 0\n    for t in tuples:\n        total += sum(t)\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        averages.append(sum(t)/len(t))\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element wise.\n    \"\"\"\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = [c for c in s if c.isdigit()]\n    chars = [c for c in s if not c.isdigit()]\n    return ''.join(chars) + ''.join(nums)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n    \"\"\"\n    merged = sorted(list1 + list2)\n    if n % 2 == 0:\n        median = (merged[n // 2] + merged[n // 2 - 1]) / 2\n    else:\n        median = merged[n // 2]\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def to_upper(s: str) -> str:\n    \"\"\"\n    Converts a given string to uppercase.\n    \"\"\"\n    return s.upper()\n\nassert to_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Finds even numbers from a list of numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j) != (0, 0):\n                adjacent_coords.append([x + i, y + j])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    \"\"\"\n    Moves all zeroes to the end of the given list.\n    \"\"\"\n    for i in nums:\n        if i == 0:\n            nums.remove(i)\n            nums.append(i)\n    return nums"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(arr, n):\n    sum = 0\n    for i in range(0, 32):\n        cnt = 0\n        for j in range(0, n):\n            if ((arr[j] >> i) & 1):\n                cnt += 1\n        sum += cnt * (n - cnt) * 2\n    return sum\n\nassert pair_xor_sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Checks whether the given amount has no profit and no loss.\n    \"\"\"\n    return buy_price == sell_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Formula for wind chill index\n    wci = 13.12 + 0.6215 * temperature - 11.37 * velocity**0.16 + 0.3965 * temperature * velocity**0.16\n    # Round to the next integer\n    return round(wci + 0.5)"}
{"task_id": "Mbpp/639", "solution": "def sum_name_length(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\nassert sum_name_length(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculates the nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "import re\ndef text_match_wordz_middle(text):\n    pattern = r'^[^z]*z[^z]*$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the first `k` elements of the array.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) + matrix[i][j]\n    total, count = 0, 0\n    i, j = 0, 0\n    while i < n and j < n:\n        total += matrix[i][j]\n        count += 1\n        if dp[i + 1][j] > dp[i][j + 1]:\n            i += 1\n        else:\n            j += 1\n    total += matrix[n - 1][n - 1]\n    count += 1\n    return total / count"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    return {name: data for name, data in student_data.items() if data[0] >= min_height and data[1] >= min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    assert len(list1) == len(list2), \"Lists must be of the same length\"\n    return sum(1 for a, b in zip(list1, list2) if a == b)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a list.\n    \"\"\"\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n    \"\"\"\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        s = s.replace(char, ':')\n    return s"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    n = len(lst)\n    prod = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = lst[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            prod += product\n    return prod"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    if n == 0 or n == 1:\n        return n\n    binary = bin(n)[2:]\n    middle_bits = list(binary[1:-1])\n    for i in range(len(middle_bits)):\n        middle_bits[i] = '1' if middle_bits[i] == '0' else '0'\n    return int(binary[0] + ''.join(middle_bits) + binary[-1], 2)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    \"\"\"\n    Finds the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(s: str) -> bool:\n    \"\"\"\n    Checks whether the given string starts with a vowel or not using regex.\n    \"\"\"\n    return bool(re.match(r'^[aeiou]', s, re.IGNORECASE))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n    Checks if all characters in a string are the same.\n    \"\"\"\n    return len(set(s)) <= 1"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculates the surface area of a tetrahedron given its edge length.\n    \"\"\"\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    \"\"\"\n    Rotates a list to the right by k items.\n    \"\"\"\n    # Handle the case where k is larger than the length of the list\n    k %= len(lst)\n\n    # Split the list into two parts at the kth index from the end\n    part1 = lst[-k:]\n    part2 = lst[:-k]\n\n    # Combine the two parts in reverse order\n    return part1 + part2"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return None in tup"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num) if digit != '0'):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return ' '.join(s.split())"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(int(x) for x in lst)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n    \"\"\"\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(int(n/2) - 1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n:\n            if arr[i] > arr[2*i + 2]:\n                return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "from typing import List, Tuple\ndef min_k(records: List[Tuple[str, int]], k: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n    \"\"\"\n    records.sort(key=lambda x: x[1])\n    return records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(nums):\n    \"\"\"\n    Finds the second smallest number in a list.\n    \"\"\"\n    m1, m2 = float('inf'), float('inf')\n    for x in nums:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "from collections import Counter\nfrom typing import List, Tuple, Dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        if '.' in s:\n            parts = s.split('.')\n            if len(parts[1]) != 2:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    \"\"\"\n    Checks if a list contains only one distinct element.\n    \"\"\"\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_month_number(month_number):\n    # Months with 30 days: April, June, September, and November\n    thirty_days_months = [4, 6, 9, 11]\n    if month_number in thirty_days_months:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check_month_number(6) == True\nassert check_month_number(7) == False\nassert check_month_number(9) == True\nassert check_month_number(12) == False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_power_of_two(n):\n        return (n & (n - 1) == 0) and n != 0\n\n    def is_power_of_five(n):\n        while n % 5 == 0:\n            n /= 5\n        return n == 1\n\n    def is_power_of_two_or_five(n):\n        return is_power_of_two(n) or is_power_of_five(n)\n\n    i = 1\n    polite_num = 0\n    while polite_num < n:\n        if is_power_of_two_or_five(i):\n            polite_num += 1\n        i += 1\n\n    return i - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target):\n    count = 0\n    num_dict = {}\n    for num in nums:\n        if num_dict.get(num):\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    for num in num_dict:\n        complement = target - num\n        if complement in num_dict:\n            if num == complement:\n                count += num_dict[num] * (num_dict[num] - 1) // 2\n            else:\n                count += num_dict[num] * num_dict[complement]\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n    For example, if n = 2, the function calculates 1^4 + 3^4 + 5^4 = 1 + 80 + 625 = 790.\n    \"\"\"\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i**4\n    return total"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expr):\n    stack = []\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    for char in expr:\n        if char in brackets:\n            stack.append(char)\n        elif len(stack) == 0 or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    words = [word for word in words if len(word) != k]\n    return ' '.join(words)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(s, sub):\n    pos = s.find(sub)\n    if pos != -1:\n        return (sub, pos, pos + len(sub))\n    return None\n\n# Test the function\nassert occurrence_substring('python programming, python language','python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    non_repeated = set(lst)\n    return sum(non_repeated)"}
{"task_id": "Mbpp/778", "solution": "from typing import List\ndef pack_consecutive_duplicates(lst: List[int]) -> List[List[int]]:\n    if not lst:\n        return []\n\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\ndef find_combinations(tuples):\n    result = []\n    for i in range(2, len(tuples) + 1):\n        for combination in combinations(tuples, i):\n            result.append(tuple(sum(x) for x in zip(*combination)))\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += ((i+1)*(n-i)+1)//2 * arr[i]\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product, odd_product"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    s = s.replace(\"(\", \"\").replace(\")\", \"\")\n    return tuple(map(int, s.split(\", \")))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    pattern = 'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, strng):\n    return tuple(lst + [strng])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(i for i in tup if not isinstance(i, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "solution": "def last(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Finds the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    This function takes an array of numbers and returns the sum of all numbers in the array.\n    \"\"\"\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    \"\"\"\n    Rotates the bits of a given number to the left by d bits.\n    \"\"\"\n    return (n << d)|(n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is a perfect square.\n    \"\"\"\n    if n < 0:\n        return False\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = -float('inf')\n    max_list = []\n    for sublist in lst:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True"}
