{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    \"\"\"\n    numbers.sort()  # Sort the list to make it easier to find close elements\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    This function takes a string of nested parentheses as input and returns a list of separate groups of balanced parentheses.\n    \"\"\"\n    result = []\n    current_group = ''\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                result.append(current_group)\n                current_group = ''\n        else:\n            continue\n\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Detects if at any point the balance of account falls below zero.\n    \n    Args:\n    operations (List[int]): A list of deposit and withdrawal operations on a bank account.\n    \n    Returns:\n    bool: True if the balance falls below zero at any point, False otherwise.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    # Calculate the mean of the input list\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute deviation of each number from the mean\n    deviations = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean of the absolute deviations\n    mad = sum(deviations) / len(deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    def max_depth(s: str) -> int:\n        stack = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                stack += 1\n                max_depth = max(max_depth, stack)\n            elif char == ')':\n                stack -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    # Initialize sum and product with default values\n    total_sum = 0\n    total_product = 1\n\n    # Iterate over the list of numbers\n    for num in numbers:\n        # Add the current number to the sum\n        total_sum += num\n        # Multiply the current number with the product\n        total_product *= num\n\n    # Return the sum and product as a tuple\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        postfix = string[-i:]\n        if is_palindrome(postfix):\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + postfix[::-1]\n\n\n# Test cases\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over the characters in the input strings\n    for i in range(max(len(a), len(b))):\n        # Get the current characters from both strings, or use 0 if out of bounds\n        char_a = a[i] if i < len(a) else '0'\n        char_b = b[i] if i < len(b) else '0'\n\n        # Perform binary XOR on the characters and append to the result\n        result += str(int(char_a) ^ int(char_b))\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n\n    return longest_str"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set(string)\n    \n    # Return the number of unique characters\n    return len(unique_chars)\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string of musical notes and returns a list of integers representing the number of beats each note lasts.\n    \n    :param music_string: A string of musical notes in a special ASCII format.\n    :return: A list of integers corresponding to the number of beats each note lasts.\n    \"\"\"\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    result = []\n    current_note = ''\n\n    for char in music_string:\n        if char in notes:\n            if current_note:\n                result.append(notes[current_note])\n                current_note = ''\n            current_note += char\n        else:\n            raise ValueError(f\"Invalid note: {char}\")\n\n    if current_note:\n        result.append(notes[current_note])\n\n    return result"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index != -1:\n            count += 1\n            index += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers from 'zero' to 'nine' in ascending order.\n    \n    Args:\n    numbers (str): A space-delimited string of numbers from 'zero' to 'nine'.\n    \n    Returns:\n    str: The string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Define a dictionary to map number strings to their integer values\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into a list of numbers\n    num_list: List[str] = numbers.split()\n\n    # Sort the list of numbers based on their integer values\n    num_list.sort(key=lambda x: num_dict[x])\n\n    # Join the sorted list back into a string\n    sorted_numbers: str = ' '.join(num_list)\n\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Sort the list of numbers\n    numbers.sort()\n\n    # Initialize the minimum difference and the pair of closest numbers\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[0])\n\n    # Iterate over the sorted list to find the pair with the minimum difference\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Check if all numbers are the same\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    # Apply the linear transform\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    unique_factors = list(set(factors))\n    result = []\n    for factor in unique_factors:\n        count = factors.count(factor)\n        result.extend([factor] * count)\n    return result"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n    return ''.join([char.swapcase() for char in string])"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    # Use list comprehension to filter the list of strings based on the prefix\n    return [string for string in strings if string.startswith(prefix)]\n\n\n# Test cases"}
{"task_id": "HumanEval/30", "solution": "def get_positive(numbers: list) -> list:\n    \"\"\"\n    Returns a list of positive numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num > 0]\n\n# Test cases"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Check if the list has an even number of coefficients\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must have an even number of coefficients\")\n\n    # Find the largest non-zero coefficient\n    max_coeff = max([coeff for coeff in xs if coeff != 0])\n\n    # Find the index of the largest non-zero coefficient\n    max_index = xs.index(max_coeff)\n\n    # Calculate the root\n    root = -xs[max_index - 1] / xs[max_index]\n\n    return root"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    return [x if i % 3 != 0 else sorted([y for i, y in enumerate(l) if i % 3 == 0])[j % len([y for i, y in enumerate(l) if i % 3 == 0])] for i, x in enumerate(l) for j in range(len([y for i, y in enumerate(l) if i % 3 == 0]))]"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"\n    Return maximum element in the list.\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    # Separate the list into two lists, one for odd indices and one for even indices\n    odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n\n    # Sort the list of even indices\n    even.sort()\n\n    # Combine the two lists, keeping the original order of odd indices\n    result = []\n    for i in range(len(l)):\n        if i % 2 != 0:\n            result.append(odd.pop(0))\n        else:\n            result.append(even.pop(0))\n\n    return result"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. If group has fewer elements than 3, add missing characters from the end.\n    decoded_groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)\n\n\n# Test cases"}
{"task_id": "HumanEval/39", "solution": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(nums: list) -> bool:\n    \"\"\"\n    Checks if there are three distinct elements in the list that sum to zero.\n    \"\"\"\n    if len(nums) < 3:\n        return False\n\n    nums.sort()\n    for i in range(len(nums) - 2):\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function calculates the number of collisions between two sets of cars driving in opposite directions.\n    The cars move at the same speed and are infinitely sturdy, so they continue moving after a collision.\n    \"\"\"\n    # The number of collisions is equal to the number of pairs of cars that can collide.\n    # Since there are n cars in each direction, the number of pairs is n * (n - 1) / 2.\n    # However, this counts each pair twice (once for each direction), so we divide by 2.\n    # But we also need to consider the case where the two sets of cars meet, which is when the distance between them is 0.\n    # In this case, all cars in one set will collide with all cars in the other set, resulting in n * n collisions.\n    # So, the total number of collisions is n * (n - 1) / 2 + n * n.\n    return n * (n - 1) // 2 + n * n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return list with elements incremented by 1.\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(map(str, digits[::-1]))"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \"\"\"\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 0:\n        # If the list has an even number of elements, the median is the average of the two middle elements\n        median = (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        # If the list has an odd number of elements, the median is the middle element\n        median = sorted_list[n // 2]\n    \n    return median"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s if ch.isalpha()])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s if ch.isalpha()])\n\n\n# Test cases"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    Removes all vowels from the input string.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Sort the characters in each string and compare the results\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"\n    Return n-th Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Checks if every opening bracket in `brackets` has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nif not correct_bracketing(\"<\"):\n    pass\nif correct_bracketing(\"<>\"):\n    pass\nif correct_bracketing(\"<<><>>\"):\n    pass\nif not correct_bracketing(\"><<>\"):\n    pass"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \"\"\"\n    # Convert lists to sets to remove duplicates and improve lookup efficiency\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n\n    # Convert the set back to a list and sort it\n    result = sorted(list(common_elements))\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Start from the largest possible factor\n    for i in range(n - 1, 1, -1):\n        # Check if the current number is a factor and prime\n        if n % i == 0 and is_prime(i):\n            return i\n\n    # If no prime factor is found, return 2 (smallest prime number)\n    return 2"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function calculates the sum of numbers from 1 to n.\n    \"\"\"\n    # Use the mathematical formula for the sum of an arithmetic series: n * (n + 1) / 2\n    return n * (n + 1) // 2\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Checks if every opening bracket in `brackets` has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nif not correct_bracketing(\"(\"):\n    pass\nif correct_bracketing(\"()\"):\n    pass\nif correct_bracketing(\"(()())\"):\n    pass\nif not correct_bracketing(\")(()\"):\n    pass"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    if len(xs) == 1:\n        return []\n    return [i * x for i, x in enumerate(xs[1:], start=1)]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \"\"\"\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"\n    Counts the number of vowels in a given string, considering 'y' as a vowel\n    only when it's at the end of the string.\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if i == len(s) - 1 and char.lower() == 'y':\n                count += 1\n            else:\n                count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert the integer to a string to easily manipulate its digits\n    str_x = str(x)\n    \n    # Calculate the effective shift, considering the case where shift > number of digits\n    effective_shift = shift % len(str_x)\n    \n    # Split the string into two parts: the part to be shifted to the end and the part to be kept at the beginning\n    part1 = str_x[-effective_shift:]\n    part2 = str_x[:-effective_shift]\n    \n    # Combine the two parts to get the result\n    result = part1 + part2\n    \n    return result"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    This function calculates the sum of the ASCII values of the upper case characters in a given string.\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "import re\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # Use regular expression to extract the numbers of apples and oranges from the string\n    apples, oranges = map(int, re.findall(r'\\d+', s))\n    \n    # Calculate the total number of apples and oranges\n    total_apples_oranges = apples + oranges\n    \n    # Return the number of mangoes by subtracting the total number of apples and oranges from the total number of fruits\n    return n - total_apples_oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    Finds the node with the smallest even value in the given array and returns it in a list.\n    If multiple nodes with the same smallest even value are found, returns the node with the smallest index.\n    If there are no even values or the given array is empty, returns an empty list.\n    \"\"\"\n    even_nodes = [i for i, x in enumerate(arr) if x % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even = min(arr[i] for i in even_nodes)\n    return [smallest_even, even_nodes[arr.index(smallest_even)]]"}
{"task_id": "HumanEval/69", "solution": "from collections import Counter\n\ndef search(lst):\n    \"\"\"\n    Finds the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself.\n    If no such a value exist, returns -1.\n    \"\"\"\n    freq = Counter(lst)\n    max_freq = max(freq.values())\n    for i in range(len(lst) - 1, -1, -1):\n        if freq[lst[i]] >= lst[i] and lst[i] > 0:\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \"\"\"\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Round the area to 2 decimal points\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n\n    # Check if the sum of the list's elements is less than or equal to the maximum possible weight\n    return sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "from collections import Counter\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    count = Counter(arr)\n    odd_count = 0\n    for value in count.values():\n        if value % 2 != 0:\n            odd_count += 1\n    return max(0, odd_count - 1)"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    \"\"\"\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    return lst1 if total_chars(lst1) <= total_chars(lst2) else lst2"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"\n    Checks if the given number is the multiplication of 3 prime numbers.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Find all prime factors of 'a'\n    prime_factors = []\n    for i in range(2, int(a ** 0.5) + 1):\n        while a % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n            a //= i\n    if a > 1 and is_prime(a):\n        prime_factors.append(a)\n\n    # Check if there are exactly 3 prime factors\n    return len(prime_factors) == 3"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    Checks if a number `x` is a simple power of `n`.\n    A simple power of `n` is a number that can be expressed as `n` raised to an integer power.\n    \"\"\"\n    if n == 0:\n        return False\n    if x == 1:\n        return True\n    if x < 1 or x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    cube_root = round(a ** (1. / 3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef hex_key(num):\n    \"\"\"Count the number of prime hexadecimal digits in a string.\"\"\"\n    prime_hex_digits = '23B7D'\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits and is_prime(int(digit, 16)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to binary format and returns a string with 'db' at the beginning and end.\n    \"\"\"\n    binary = bin(decimal)[2:]  # Remove the '0b' prefix\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s: str) -> bool:\n    \"\"\"\n    Checks if a given string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = {\n        'A+': (4.0, float('inf')),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (3.0, 3.3),\n        'B': (2.7, 3.0),\n        'B-': (2.3, 2.7),\n        'C+': (2.0, 2.3),\n        'C': (1.7, 2.0),\n        'C-': (1.3, 1.7),\n        'D+': (1.0, 1.3),\n        'D': (0.7, 1.0),\n        'D-': (0.0, 0.7),\n        'E': (0.0, 0.0)\n    }\n\n    result = []\n    for grade in grades:\n        for letter, (lower, upper) in letter_grades.items():\n            if lower <= grade <= upper:\n                result.append(letter)\n                break\n        else:\n            result.append('E')\n\n    return result"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the string length is a prime number.\"\"\"\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the total number of n-digit numbers\n    total_numbers = 9 * (10 ** (n - 1)) + 1\n\n    # Calculate the number of n-digit numbers that start with 1\n    start_with_one = 10 ** (n - 1)\n\n    # Calculate the number of n-digit numbers that end with 1\n    end_with_one = 10 ** (n - 1)\n\n    # Calculate the number of n-digit numbers that both start and end with 1\n    both_start_and_end_with_one = 1\n\n    # Return the total count of numbers that start or end with 1\n    return start_with_one + end_with_one - both_start_and_end_with_one"}
{"task_id": "HumanEval/84", "solution": "def sum_of_binary_digits(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]  # Convert N to binary and remove the '0b' prefix\n    return str(sum(int(digit) for digit in binary))  # Sum the digits and convert to string"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \"\"\"\n    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of the input string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        # Sort the characters in the word in ascending order based on ASCII value\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    # Join the ordered words back into a string with spaces in between\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    Finds all occurrences of `x` in the given 2D list and returns a list of tuples\n    representing the coordinates of `x` in the format (row, column).\n    The list of tuples is sorted by row in ascending order and then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        if row:\n            j = len(row) - 1\n            while j >= 0 and row[j] != x:\n                j -= 1\n            if j >= 0:\n                result.append((i, j))\n                while j > 0 and row[j] == x:\n                    j -= 1\n                    result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\n    # Create a copy of the array\n    array_copy = array[:]\n\n    # Determine the sorting order based on the sum of the first and last elements\n    if array[0] + array[-1] % 2 == 0:\n        array_copy.sort()\n    else:\n        array_copy.sort(reverse=True)\n\n    return array_copy"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"\n    Encrypts a string by shifting the alphabet down by two multiplied to two places.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string of words.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    boredoms = 0\n    for sentence in sentences:\n        # Remove leading and trailing whitespaces\n        sentence = sentence.strip()\n        if sentence and sentence.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    \"\"\"\n    Checks if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    \n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        z (int): The third number.\n    \n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, and all numbers are integers. False otherwise.\n    \"\"\"\n    # Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters, and replacing \n    all vowels with the letter that appears 2 places ahead of that \n    vowel in the english alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = \"\"\n\n    for char in message:\n        if char in vowels:\n            # Find the index of the vowel in the vowels string\n            index = vowels.index(char)\n            # Replace the vowel with the letter 2 places ahead\n            encoded_message += vowels[(index + 2) % 10]\n        else:\n            # Swap the case of the letter\n            encoded_message += char.swapcase()\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def largest_prime_digit_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    if max_prime == 0:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"\n    Returns a list of the first n prime numbers less than n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num) and num < n:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    \"\"\"\n    # Extract the unit digit of the first number\n    unit_digit_a = a % 10\n    \n    # Extract the unit digit of the second number\n    unit_digit_b = b % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the product\n    return product"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \"\"\"\n    try:\n        num = float(value)\n        return round(num)\n    except ValueError:\n        raise ValueError(\"Invalid input. Please enter a valid number.\")"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = [n]\n    for _ in range(n - 1):\n        n += 1\n        if n % 2 == 0:\n            n += 1\n        result.append(n)\n    return result"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into an array of words.\n    \n    Args:\n        s (str): The input string of words.\n    \n    Returns:\n        list: An array of words.\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    s = s.strip()\n    \n    # Replace commas with spaces to handle both comma and space separated words\n    s = s.replace(\",\", \" \")\n    \n    # Split the string into words\n    words = s.split()\n    \n    return words"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    # Check if x is even\n    if x % 2 == 0:\n        # If x is even, the biggest even number in the range is x\n        return x\n    # If x is odd, the biggest even number in the range is x-1\n    else:\n        return x - 1\n\n    # Check if y is even\n    if y % 2 == 0:\n        # If y is even, the biggest even number in the range is y\n        return y\n    # If y is odd, the biggest even number in the range is y-1\n    else:\n        return y - 1\n\n    # If x is greater than y, return -1\n    if x > y:\n        return -1\n    # If y is greater than x, check if y is even\n    elif y > x:\n        if y % 2 == 0:\n            return y\n        else:\n            return y - 1\n    # If x and y are equal, check if x is even\n    else:\n        if x % 2 == 0:\n            return x\n        else:\n            return x - 1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_even_digit(n):\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # Filter out numbers outside the range 1-9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit with its corresponding name\n    result = [get_digit_name(num) for num in reversed_arr]\n    \n    return result\n\n\ndef get_digit_name(num):\n    \"\"\"\n    Returns the name of the digit corresponding to the given number.\n    \"\"\"\n    names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return names[num - 1]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\"\n    Returns a list of size n, where the value at index i is the factorial of i if i is even,\n    or the sum of numbers from 1 to i otherwise.\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Counts the number of elements in the array which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative.\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    return arr == sorted_arr or arr == sorted_arr[-1:] + sorted_arr[:-1]"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between `lst1` and `lst2` to make `lst1` a list of only even numbers.\n    \"\"\"\n    # Check if all elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # Check if all elements in lst2 are even\n    if all(num % 2 == 0 for num in lst2):\n        return \"YES\"\n\n    # Check if all odd elements in lst1 can be replaced with even elements from lst2\n    odd_in_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_in_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(odd_in_lst1) <= len(even_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    if not test:\n        return {}\n\n    words = test.split()\n    letter_count = {}\n\n    for word in words:\n        for letter in word:\n            if letter in letter_count:\n                letter_count[letter] += 1\n            else:\n                letter_count[letter] = 1\n\n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n\n    return result"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    \"\"\"\n    Deletes all characters in `s` that are equal to any character in `c` and checks if the result string is a palindrome.\n    \"\"\"\n    # Convert the character set to a set for efficient lookups\n    c_set = set(c)\n\n    # Filter out characters in `s` that are in `c_set`\n    filtered_s = [char for char in s if char not in c_set]\n\n    # Check if the filtered string is a palindrome\n    is_palindrome = filtered_s == filtered_s[::-1]\n\n    return (''.join(filtered_s), is_palindrome)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(digit) % 2 for digit in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{len(s)}ng {len(s)} of the {len(s)}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"\n    Returns a list of all words from string s that contain exactly n consonants, \n    in order these words appear in the string s.\n    \"\"\"\n    # Define a helper function to check if a character is a consonant\n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in 'aeiou'\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each word in the string\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(is_consonant(char) for char in word)\n\n        # If the word has exactly n consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    \"\"\"\n    Finds the closest vowel that stands between two consonants from the right side of the word.\n    \n    Args:\n    word (str): The input word to search for the closest vowel.\n    \n    Returns:\n    str: The closest vowel that meets the condition, or an empty string if no such vowel is found.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i + 1] not in vowels and word[i + 2] not in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    \"\"\"\n    Checks if it is possible to concatenate the two strings in some order, \n    that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S are balanced.\n    \"\"\"\n    def is_valid(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_valid(lst[0] + lst[1]) or is_valid(lst[1] + lst[0]) else 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    def is_two_digits(num):\n        return 10 <= num <= 99\n\n    return sum(num for num in arr[:k] if is_two_digits(num))"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    try:\n        # Split the date string into month, day, and year\n        month, day, year = date.split('-')\n        \n        # Check if the date string is in the correct format\n        if len(month) != 2 or len(day) != 2 or len(year) != 4:\n            return False\n        \n        # Convert the month, day, and year to integers\n        month, day, year = int(month), int(day), int(year)\n        \n        # Check if the month is valid\n        if month < 1 or month > 12:\n            return False\n        \n        # Check if the day is valid for the given month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        \n        # If all checks pass, the date is valid\n        return True\n    \n    except ValueError:\n        # If a ValueError is raised, the date string is not in the correct format\n        return False"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ',' in txt:\n        return txt.replace(',', ' ').split()\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        return sum(1 for i, c in enumerate(txt) if c.islower() and i % 2 != 0)"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Check if the length of intersection of two intervals is a prime number.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = max(0, intersection_end - intersection_start)\n    return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    if not arr:\n        return None\n\n    sign_product = 1\n    for num in arr:\n        if num != 0:\n            sign_product *= 1 if num > 0 else -1\n\n    return sum(abs(num) * sign_product for num in arr)"}
{"task_id": "HumanEval/129", "solution": "from collections import deque\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    queue = deque([(grid[0][0], [(grid[0][0], 0, 0)])])\n    visited[0][0] = True\n    min_path = []\n    while queue:\n        val, path = queue.popleft()\n        if len(path) == k:\n            min_path = path\n            break\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            x, y = path[-1][1] + dx, path[-1][2] + dy\n            if 0 <= x < m and 0 <= y < n and not visited[x][y]:\n                queue.append((grid[x][y], path + [(grid[x][y], x, y)]))\n                visited[x][y] = True\n    return [x[0] for x in min_path]"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    sequence = [3, 2]\n    while len(sequence) < n + 1:\n        if len(sequence) % 2 == 0:\n            sequence.append(1 + sequence[-1] / 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence[:n + 1]"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    \"\"\"\n    Checks if a string of square brackets contains a valid subsequence of nested brackets.\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    This function calculates the sum of squares of numbers in the given list.\n    Each number in the list is rounded up to the nearest integer using the math.ceil function.\n    \"\"\"\n    return sum(math.ceil(num) ** 2 for num in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Returns True if the last character of a given string is an alphabetical character\n    and is not a part of a word, and False otherwise.\n    \"\"\"\n    # Remove trailing spaces\n    txt = txt.rstrip()\n    \n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Get the last character\n    last_char = txt[-1]\n    \n    # Check if the last character is alphabetical and not part of a word\n    return last_char.isalpha() and not txt[-2:].isalpha()\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Finds the largest index of an element which is not greater than or equal to the element immediately preceding it.\n    If no such element exists, returns -1.\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n\n    if negative_nums:\n        largest_negative = max(negative_nums)\n    else:\n        largest_negative = None\n\n    if positive_nums:\n        smallest_positive = min(positive_nums)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert strings to floats\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"\n    def is_sum_of_four_evens(num):\n        count = 0\n        while num > 0:\n            if num % 2 == 0:\n                count += 1\n            num //= 2\n        return count == 4\n\n    return is_sum_of_four_evens(n)"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace more than 2 consecutive spaces with -\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Checks if a file name is valid according to the given conditions.\n    \n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'.\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \n    Parameters:\n    file_name (str): The name of the file to be checked.\n    \n    Returns:\n    str: 'Yes' if the file's name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into two parts\n    name, extension = file_name.split('.')\n\n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check if the name starts with a letter and contains at most three digits\n    if not re.match('^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*$', name):\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers, squares the entry if its index is a multiple of 3, \n    cubes the entry if its index is a multiple of 4 and not a multiple of 3, and returns the sum of all entries.\n    \"\"\"\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n    return result"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing words from the original sentence,\n    whose lengths are prime numbers, in the same order.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n and returns True if the result is a whole number, False otherwise.\n    \"\"\"\n    # Convert string fractions to Fraction objects\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n\n    # Multiply the fractions\n    result = frac_x * frac_n\n\n    # Check if the result is a whole number\n    return result.denominator == 1"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Use a custom sorting key that first compares the sum of digits and then the original index\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"\n    Counts the number of elements in the array that are greater than 10 and \n    both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    count = 0\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to a string to easily access the first and last digits\n            num_str = str(num)\n            # Check if the first and last digits are odd\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    def is_multiple_of_3(a, b, c):\n        return (a + b + c) % 3 == 0\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if is_multiple_of_3(a[i], a[j], a[k]):\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    \"\"\"\n    Returns a tuple of planets whose orbits are between the orbits of planet1 and planet2.\n    The planets are sorted by proximity to the Sun.\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/149", "solution": "def list_sort(lst):\n    \"\"\"\n    Deletes the strings that have odd lengths from the list, \n    and returns the resulted list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, \n    and you should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    # Filter out strings with odd lengths\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    \n    return sorted_words"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \"\"\"\n    return sum([x**2 for x in lst if isinstance(x, int) and x % 2 != 0])"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    \"\"\"\n    This function compares the given game scores with the user's guesses and returns\n    an array of the same length denoting how far off each guess was.\n    If the guess is correct, the value is 0, and if not, the value is the absolute\n    difference between the guess and the score.\n    \"\"\"\n    return [abs(g - s) for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Finds the strongest extension for a given class and returns the class name\n    followed by the strongest extension name.\n    \"\"\"\n    def calculate_strength(extension):\n        \"\"\"Calculates the strength of an extension based on the number of uppercase and lowercase letters.\"\"\"\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    # Find the strongest extension\n    strongest_extension = max(extensions, key=calculate_strength)\n\n    # Return the class name followed by the strongest extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    Checks if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    for i in range(len(b)):\n        if b in a[i:] + a[:i]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to easily iterate over each digit\n    for digit in str(abs(num)):\n        # Convert the digit back to an integer to check if it's even or odd\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    \"\"\"\n    # Sort the sides to ensure a and b are the shorter sides\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return a**2 + b**2 == c**2\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"\n    Finds the word with the maximum number of unique characters. If multiple words\n    have the same maximum number of unique characters, returns the one that comes\n    first in lexicographical order.\n    \"\"\"\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            # If the number of unique characters is the same, choose the one that comes first in lexicographical order\n            max_word = min(max_word, word)\n\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \"\"\"\n    # Calculate the total number of carrots eaten\n    total_eaten = number + need\n    \n    # Calculate the number of carrots left\n    carrots_left = remaining - (total_eaten - number)\n    \n    # If there are not enough carrots, set carrots_left to 0\n    if carrots_left < 0:\n        carrots_left = 0\n    \n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"\n    Reverses the case of letters in the string and reverses the string if it contains no letters.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Check if the character is uppercase or lowercase\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    return result[::-1] if not result.replace(\" \", \"\").replace(\"#\", \"\").replace(\"@\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\":\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"(\", \"\").replace"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    a, b = min(a, b), max(a, b)\n\n    # Generate even numbers between a and b\n    even_numbers = [i for i in range(a, b + 1) if i % 2 == 0]\n\n    return even_numbers"}
