{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    groups = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_group:\n                stack.append(current_group)\n                current_group = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.append(char)\n            current_group = \"\".join(stack[-2:])\n            if stack.count(\"(\") == stack.count(\")\"):\n                groups.append(current_group)\n                stack = []\n                current_group = \"\"\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    if stack:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n    return groups\n\n# Test the function"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)\n\n# Testing the function"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad\n\n# Test the function"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize a counter for the current depth and the maximum depth\n        current_depth = 0\n        max_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current depth\n            if char == '(':\n                current_depth += 1\n\n                # If the current depth is greater than the maximum depth, update the maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n\n            # If the character is a closing parenthesis, decrement the current depth\n            elif char == ')':\n                current_depth -= 1\n\n        # Append the maximum depth to the list of maximum depths\n        max_depths.append(max_depth)\n\n    return max_depths\n\n# Test the function with the provided example"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Testing the function"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n# Test cases"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_nums = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_nums.append(max(max_nums[i-1], numbers[i]))\n\n    return max_nums\n\n# Testing the function"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n# Test cases"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''\n    for i in range(max_len):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n# Test cases"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]\n\n# Test the function"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test cases"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n# Test cases"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n# Test the function"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test cases"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n\n# Test the function\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Testing the function"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Testing the function"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Testing the function"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n# Test the function"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# Testing the function"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Testing the function"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n > 0]\n\n# Testing the function"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0:\n        return -xs[-1] / xs[-2]\n    else:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n\n# Test cases"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    divisible_by_three = [(i, v) for i, v in enumerate(l) if i % 3 == 0]\n    sorted_values = sorted(v for _, v in divisible_by_three)\n    l_prime = list(l)\n    for (i, _), sorted_value in zip(divisible_by_three, sorted_values):\n        l_prime[i] = sorted_value\n    return l_prime\n\n# Test cases"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Test the function"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n# Testing the function"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    l_prime = l[:]\n    for i in range(0, len(l), 2):\n        l_prime[i] = even_indices_values.pop(0)\n    return l_prime\n\n# Test cases"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\noriginal_string = \"Hello, World!\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n# Test cases"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return n * (n - 1) // 2\n\n# Test cases"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n\n# Testing the function"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n# Test cases"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Test the function"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n# Test cases"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n# Test cases"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Testing the function"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)\n\n# Test cases"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n\n# Testing\noriginal_text = \"hello\"\nencoded_text = encode_shift(original_text)\ndecoded_text = decode_shift(encoded_text)\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n# Testing the function"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Testing the function"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# Test cases"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Testing the function"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n# Test cases"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n\n# Testing the function"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    return sum(range(1, n+1))\n\n# Test cases"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Skip the first coefficient as it's the constant term and its derivative is always 0\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[-1] + fibfib_values[-2] + fibfib_values[-3])\n        return fibfib_values[-1]\n\n# Test cases"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n        if s[i].lower() == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = list(str(x))\n    if shift > len(digits):\n        return ''.join(digits[::-1])\n    else:\n        return ''.join(digits[-shift:] + digits[:-shift])\n\n# Test cases"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    apples, oranges = map(int, s.split()[::2])\n    return n - apples - oranges\n\n# Test cases"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_even_index = float('inf')\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num <= smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n\n# Test cases"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    from collections import Counter\n    count = Counter(lst)\n    max_val = max(count.keys())\n    for i in range(max_val, 0, -1):\n        if count[i] >= i:\n            return i\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n\n# Test cases"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n# Test cases"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    sum1 = sum(len(word) for word in lst1)\n    sum2 = sum(len(word) for word in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst1\n\n# Test cases"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (n) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n            n //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(n)\n\n# Test cases"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    x = round(a ** (1. / 3))\n    return x ** 3 == a or (x+1) ** 3 == a or (x-1) ** 3 == a\n\n# Test cases"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in prime_hex_digits)\n\n# Test cases"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n# Test cases"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function\nassert(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'])"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))\n\n# Test cases"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits\n    total_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and return it\n    return bin(total_sum)[2:]\n\n# Test cases"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n\n# Test cases"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    if not lst:\n        return []\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda y: (y[0], -y[1]))\n\n# Test cases"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n# Test cases"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n# Test cases"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))  # remove duplicates\n    lst.sort()  # sort the list\n    return lst[1] if len(lst) > 1 else None\n\n# Test cases"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence]\n\n    # Count the number of sentences starting with \"I\"\n    boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredoms\n\n# Test the function"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97).upper() if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97) % 26 + 97).upper() if char.islower() else chr((ord(char) - 65) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_and_sum_of_digits(lst):\n    largest_prime = max(num for num in lst if is_prime(num))\n    return sum_of_digits(largest_prime)\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:\n        return False\n    keys_lower = [k for k in d.keys() if isinstance(k, str) and k.islower()]\n    keys_upper = [k for k in d.keys() if isinstance(k, str) and k.isupper()]\n    return len(keys_lower) == len(d) or len(keys_upper) == len(d)\n\n# Test cases"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\n# Test cases"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the unit digits of the numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Test cases"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n# Test cases"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n# Test cases"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i)\n    return stones\n\n# Test cases"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', '').split()\n\n# Test cases"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        if x % 2 == 0:\n            return y if y % 2 == 0 else y - 1\n        else:\n            return y if y % 2 == 0 else y - 1 if y - 1 > x else -1\n\n# Test cases"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n# Test cases"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has an even digit.\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Test cases"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Define the mapping from numbers to their names\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Filter out numbers not in the range 1-9 and sort the remaining numbers\n    arr = sorted([num for num in arr if 1 <= num <= 9])\n\n    # Reverse the array\n    arr = arr[::-1]\n\n    # Replace each number with its corresponding name\n    arr = [num_to_name[num] for num in arr]\n\n    return arr\n\n# Test the function"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_to_n(x):\n        return int(x * (x + 1) / 2)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(1 for n in arr if sum_digits(n) > 0)\n\n# Test cases"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            count += 1\n    if count > 1:\n        return False\n    return True\n\n# Test cases"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_lst1 = sum(x % 2 != 0 for x in lst1)\n    even_lst2 = sum(x % 2 == 0 for x in lst2)\n    return \"YES\" if odd_lst1 <= even_lst2 else \"NO\"\n\n# Test cases"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary\n    hist = {}\n    # Split the string into a list of words\n    words = test.split()\n    # Iterate over the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in hist:\n            hist[word] += 1\n        # Otherwise, add the word to the dictionary with a count of 1\n        else:\n            hist[word] = 1\n    # Find the maximum count\n    max_count = max(hist.values(), default=0)\n    # Return a dictionary containing only the words with the maximum count\n    return {word: count for word, count in hist.items() if count == max_count}\n\n# Test the function"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all the characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n\n    return (s, is_palindrome)\n\n# Test the function"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        template = \"the number of odd elements {}n the str{}ng {} of the {}nput.\"\n        result.append(template.format(odd_digits, odd_digits, odd_digits, odd_digits))\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n# Test cases"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    # Flatten the grid and count the number of 1s\n    total_wells = sum(sum(row) for row in grid)\n    # Calculate the number of buckets needed\n    total_buckets = math.ceil(total_wells / capacity)\n    return total_buckets\n\n# Test cases"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Test cases"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    consonants = [word for word in words if sum(1 for char in word if char not in vowels) == n]\n    return consonants\n\n# Test cases"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n# Test cases"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate over each string in the list\n    for string in lst:\n        # Iterate over each character in the string\n        for char in string:\n            # If the character is an open parenthesis, increment the counter\n            if char == '(':\n                open_count += 1\n            # If the character is a close parenthesis, increment the counter\n            elif char == ')':\n                close_count += 1\n\n    # If the number of open parentheses is greater than or equal to the number of close parentheses,\n    # it's possible to make a good string\n    if open_count >= close_count:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]\n\n# Test cases"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # If the number of digits in the current element is at most 2, add it to the sum\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n\n    return total_sum\n\n# Test the function\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    odd_numbers = [num for num in collatz(n) if num % 2 != 0]\n    return sorted(list(set(odd_numbers)))\n\n# Test cases"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    if date == '':\n        return False\n    else:\n        try:\n            month, day, year = map(int, date.split('-'))\n        except ValueError:\n            return False\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 31):\n            return False\n\n        return True\n\n# Test cases"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\n# Test cases"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] >= lst[i + 1]:\n                return False\n        return True\n\n# Test cases"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Determine the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n# Test cases"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum\n\n# Test cases"}
{"task_id": "HumanEval/129", "solution": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    pq, visited, res = [], set(), []\n    for r in range(n):\n        for c in range(n):\n            pq.append((grid[r][c], r, c))\n    heapq.heapify(pq)\n    while len(res) < k:\n        v, r, c = heapq.heappop(pq)\n        if (r, c) not in visited:\n            res.append(v)\n            visited.add((r, c))\n            for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                    heapq.heappush(pq, (grid[nr][nc], nr, nc))\n    return res\n\n# Test cases"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence\n\n# Test cases"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n# Test cases"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(int(abs(num) + 0.99) ** 2 for num in lst)\n\n# Test cases"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n# Test cases"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Test cases"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    neg_max = None\n    pos_min = None\n\n    for num in lst:\n        if num < 0:\n            if neg_max is None or num > neg_max:\n                neg_max = num\n        elif num > 0:\n            if pos_min is None or num < pos_min:\n                pos_min = num\n\n    return (neg_max, pos_min)\n\n# Test cases"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Check if a and b are of the same type\n    if type(a) != type(b):\n        return None\n\n    # If a and b are both integers or floats, return the larger one\n    if isinstance(a, (int, float)):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n\n    # If a and b are both strings, replace ',' with '.' and return the larger one\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n\n# Test cases"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 10:\n        return False\n    else:\n        return n % 4 == 0\n\n# Test cases"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n\n# Test cases"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i + 1 < len(text) and text[i+1] == ' ':\n                result.append('-')\n                while i < len(text) and text[i] == ' ':\n                    i += 1\n            else:\n                result.append('_')\n                i += 1\n        else:\n            result.append(text[i])\n            i += 1\n    return ''.join(result)\n\n# Test cases"}
{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than 3 digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into the name and extension\n    name, extension = file_name.split('.')\n\n    # Check if the name starts with a letter and is not empty\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n\n# Test cases"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    return sum(num**3 if i%3==0 and i%4!=0 else num**2 if i%4==0 else num for i, num in enumerate(lst))\n\n# Test cases"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\n# Test cases"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the numerator and denominator of the simplified fraction\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n\n    # Check if the simplified fraction is a whole number\n    return new_num % new_den == 0\n\n# Test cases"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n\n# Test cases"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test cases"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = min(planets.index(planet1), planets.index(planet2))\n        end = max(planets.index(planet1), planets.index(planet2))\n        return tuple(planets[start+1:end])\n\n# Test cases"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort()\n    lst.sort(key=len)\n    return lst\n\n# Test the function\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\"\"\"\n    return x if is_prime(n) else y\n\n# Test cases"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i > 0 and isinstance(i, int) and i%2 != 0])\n\n# Test cases"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - h) for g, h in zip(game, guess)]\n\n# Test cases"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    strongest_strength = sum([1 for c in strongest_extension if c.isupper()]) - sum([1 for c in strongest_extension if c.islower()])\n\n    for extension in extensions[1:]:\n        strength = sum([1 for c in extension if c.isupper()]) - sum([1 for c in extension if c.islower()])\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test cases"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    \"\"\"\n    This function checks if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n\n    return False\n\n# Test cases"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n# Test cases"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle\n    sides = sorted([a, b, c])\n\n    # Check if the triangle is right-angled\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n\n    return max_word\n\n# Test cases"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n# Test cases"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result as the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n\n# Test the function"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n# Test cases"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Test cases"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over the range from a to b\n    for i in range(a, b+1):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If it is, append it to the list\n            even_numbers.append(i)\n\n    # Return the list of even numbers\n    return even_numbers\n\n# Test the function"}
